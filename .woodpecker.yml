steps:
  deploy-homolog:
    image: docker:latest
    environment:
      EMAIL_USER:
        from_secret: EMAIL_USER
      EMAIL_PASS:
        from_secret: EMAIL_PASS
      JWT_SECRET:
        from_secret: JWT_SECRET
    when:
      branch: homolog
      event: 
        - push
        - pull_request
    commands:
      - cd /woodpecker/src/github.com/joaocosta03/task-2-gcs

      - |
        echo "NODE_ENV=$NODE_ENV" > backend/.env.homolog
        echo "DB_USER=$DB_USER" >> backend/.env.homolog
        echo "DB_PASS=$DB_PASS" >> backend/.env.homolog

      # Sobe containers de homologa√ß√£o
      - docker-compose -f docker-compose.homolog.yml -p homolog up -d --build

      # Aguarda a API subir
      - echo "‚è≥ Aguardando backend responder..."
      - |
        curl --retry 10 --retry-delay 5 --fail http://localhost:3001/login || (
          echo "‚ùå API n√£o respondeu, derrubando containers..."
          docker-compose -f docker-compose.homolog.yml -p homolog down
          exit 1
        )
      - echo "‚úÖ Ambiente de homologa√ß√£o iniciado!"

      # Executa os testes no backend
      - cd backend
      - npm install
      - npm test || (
          echo "‚ùå Testes do backend falharam, derrubando containers..."
          cd ..
          docker-compose -f docker-compose.homolog.yml -p homolog down
          exit 1
        )
      - echo "‚úÖ Testes do backend conclu√≠dos!"

      # Executa os testes no frontend
      - cd ../frontend-novo
      - npm install
      - npx vitest run || (
          echo "‚ùå Testes do frontend falharam, derrubando containers..."
          cd ..
          docker-compose -f docker-compose.homolog.yml -p homolog down
          exit 1
        )
      - echo "‚úÖ Testes do frontend conclu√≠dos!"
      - echo "‚úÖ Homologa√ß√£o conclu√≠da com sucesso!"

  deploy-prod:
    image: docker:latest
    environment:
      EMAIL_USER:
        from_secret: EMAIL_USER
      EMAIL_PASS:
        from_secret: EMAIL_PASS
      JWT_SECRET:
        from_secret: JWT_SECRET
    when:
      branch: main
      event: 
        - push
        - pull_request
    commands:
      - cd /woodpecker/src/github.com/joaocosta03/task-2-gcs

      - |
        echo "NODE_ENV=$NODE_ENV" > backend/.env.prod
        echo "DB_USER=$DB_USER" >> backend/.env.prod
        echo "DB_PASS=$DB_PASS" >> backend/.env.prod

      # Sobe containers de produ√ß√£o
      - docker-compose -f docker-compose.prod.yml -p prod up -d --build

      # Aguarda a API subir
      - echo "‚è≥ Aguardando backend responder..."
      - |
        curl --retry 10 --retry-delay 5 --fail http://localhost:3001/login || (
          echo "‚ùå API n√£o respondeu, derrubando containers..."
          docker-compose -f docker-compose.prod.yml -p prod down
          exit 1
        )
      - echo "‚úÖ Ambiente de produ√ß√£o iniciado!"

      # # Executa os testes no backend
      # - cd backend
      # - npm install
      # - npm test || (
      #     echo "‚ùå Testes do backend falharam, derrubando containers..."
      #     cd ..
      #     docker-compose -f docker-compose.prod.yml -p prod down
      #     exit 1
      #   )
      # - echo "‚úÖ Testes do backend conclu√≠dos!"

      # # Executa os testes no frontend
      # - cd ../frontend-novo
      # - npm install
      # - npx vitest run || (
      #     echo "‚ùå Testes do frontend falharam, derrubando containers..."
      #     cd ..
      #     docker-compose -f docker-compose.prod.yml -p prod down
      #     exit 1
      #   )
      # - echo "‚úÖ Testes do frontend conclu√≠dos!"
      - echo "üöÄ Produ√ß√£o implantada com sucesso!"
